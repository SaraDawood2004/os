#include <stdio.h>

struct Process {
    int id, bt, st, ft, wt;
} p[10], temp;

int main() {
    int n, i, j, totalWT = 0, totalTAT = 0;
    float avgWT, avgTAT;

    printf("Enter number of jobs: ");
    scanf("%d", &n);

    // Input burst times
    for (i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter burst time for job %d: ", p[i].id);
        scanf("%d", &p[i].bt);
    }

    // Sort by burst time (SJF)
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (p[i].bt > p[j].bt) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    // Calculate start, finish, waiting times
    for (i = 0; i < n; i++) {
        p[i].st = (i == 0) ? 0 : p[i - 1].ft;
        p[i].ft = p[i].st + p[i].bt;
        p[i].wt = p[i].st;
        totalWT += p[i].wt;
        totalTAT += p[i].ft;
    }

    // Display result
    printf("\nID\tBT\tST\tFT\tWT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", p[i].id, p[i].bt, p[i].st, p[i].ft, p[i].wt);
    }

    avgWT = (float)totalWT / n;
    avgTAT = (float)totalTAT / n;
    printf("\nAverage Waiting Time: %.2f", avgWT);
    printf("\nAverage Turnaround Time: %.2f\n", avgTAT);

    return 0;
}
